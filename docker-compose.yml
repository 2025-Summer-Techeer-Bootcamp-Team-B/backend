version: "3.8"

services:

  fastapi:
    build: .
    container_name: fastapi
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --workers 8 # 로컬 환경에서만 --reload를 사용하도록 함
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - db
      - opensearch
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - monitoring

  # celery:
  #   build: .
  #   container_name: celery
  #   command: celery -A app.celery_app.celery_app worker --loglevel=info --concurrency=8
  #   volumes:
  #     - .:/app
  #   env_file:
  #     - .env
  #   depends_on:
  #     - rabbitmq
  #     - redis
  #     - db
  #   environment:
  #     - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   networks:
  #   - monitoring

  celery-worker-tts:
    build: .
    container_name: celery-worker-tts
    command: celery -A app.celery_app worker --loglevel=info -Q tts -n tts@%h --concurrency=8
    depends_on:
      - rabbitmq
      - redis
      - db
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0  
    volumes:
      - .:/app
    networks:
      - monitoring
  celery-worker-image:
    build: .
    container_name: celery-worker-image
    command: celery -A app.celery_app worker --loglevel=info -Q image -n image@%h --concurrency=6
    depends_on:
      - rabbitmq
      - redis
      - db
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
    networks:
      - monitoring
  flower:
    build: .
    container_name: flower
    command: celery -A app.celery_app.celery_app flower --port=5555 --broker=amqp://guest:guest@rabbitmq:5672//
    ports:
      - "5555:5555"
    depends_on:
      - celery-worker-tts
      - celery-worker-image
      - rabbitmq
      - redis
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
    networks:
      - monitoring
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # AMQP 포트
      - "15672:15672"  # RabbitMQ 관리 콘솔 포트
      - "15692:15692" # metrics 포트
    # restart: always # 연결 끊어질시 다시 시작용
    tty: true # 끊어짐 방지
    environment:
      - RABBITMQ_DEFAULT_USER=guest # 유저
      - RABBITMQ_DEFAULT_PASS=guest # 비번
    networks:
      - monitoring
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - monitoring
  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    # pgAdmin 커넥션 위한 5432 포트매핑
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - fastapi
    networks:
      - monitoring

  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
    ports:
      - 9200:9200
      - 9600:9600
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    privileged: true
    networks:
      - monitoring
    depends_on:
      - fastapi

networks:
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
